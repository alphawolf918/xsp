<?php
class Errors {
	public $err = [
		"0" => "UnknownCommand",
		"1" => "FileExistsAlready",
		"2" => "CouldNotCreateFile",
		"3" => "MissingConstructWith",
		"4" => "RootMethodNotFound",
		"5" => "MissingConstructFrom",
		"6" => "UnfinishedWhereClause",
		"7" => "NoAttributeOperatorFound",
		"8" => "SimplexInvalidDeclaration",
		"9" => "GenericSyntax",
		"10" => "MissingConstructAttr",
		"11" => "MissingConstructThen",
		"12" => "MissingCondition",
		"13" => "UnfinishedExpression",
		"14" => "MissingConstructBy",
		"15" => "UnknownSubCommand",
		"16" => "UnrecognizedInstance",
		"17" => "ClassNameNotFound",
		"18" => "MissingConstructTo",
		"19" => "ModDefOpNotFound",
		"20" => "ModExistsAlready",
		"21" => "ModNotFound",
		"22" => "MissingConstructIn",
		"23" => "DirectoryInvalid",
		"24" => "DirectoryNotEmpty",
		"25" => "DirectoryAccessDenied",
		"26" => "DirectoryNameNotFound",
		"27" => "FileNotFound",
		"28" => "ModeEmpty",
		"29" => "MixedEmpty",
		"30" => "InvalidFile",
		"31" => "VarValEmpty",
		"32" => "VarNameNotFound",
		"33" => "UnknownSymbol",
		"34" => "DOMInstanceNotFound",
		"35" => "MaxSearchLimitReached",
		"36" => "FileDefNotFound",
		"37" => "ModDefNotFound",
		"38" => "ComplexInvalid",
		"39" => "ClassNotFound",
		"40" => "SimplexInvalidDoesNotExist",
		"41" => "CouldNotWriteToFile",
		"42" => "ComplexDoesNotExist",
		"43" => "InvalidMathRoundOption"
	];
	
	public $errstr = [
		"UnknownCommand" => "The specified command was unrecognized.",
		"FileExistsAlready" => "The specified file already exists.",
		"CouldNotCreateFile" => "The specified file could not be created.",
		"MissingConstructWith" => "Could not locate 'with' construct.",
		"RootMethodNotFound" => "The root() method is missing.",
		"MissingConstructFrom" => "Could not locate 'from' construct.",
		"UnfinishedWhereClause" => "Your 'where' clause was unfinished.",
		"NoAttributeOperatorFound" => "The '@' operator is missing.",
		"SimplexInvalidDeclaration" => "Invalid Simplex variable declaration.",
		"GenericSyntax" => "There was a syntax error in your statement.",
		"MissingConstructAttr" => "Could not locate 'attr' construct.",
		"MissingConstructThen" => "Could not locate 'then' construct.",
		"MissingCondition" => "The condition to evaluate is missing.",
		"UnfinishedExpression" => "The expression was unfinished.",
		"MissingConstructBy" => "Could not locate 'by' construct.",
		"UnknownSubCommand" => "The specified subcommand was unrecognized.",
		"UnrecognizedInstance" => "The class instance specified was unrecognized.",
		"ClassNameNotFound" => "The name of your class is missing from your statement.",
		"MissingConstructTo" => "Could not locate 'to' construct.",
		"ModDefOpNotFound" => "':' operator missing from mod definition.",
		"ModExistsAlready" => "That module already exists.",
		"ModNotFound" => "That mod does not exist.",
		"MissingConstructIn" => "Could not locate 'in' construct.",
		"DirectoryInvalid" => "You have specified an invalid directory.",
		"DirectoryNotEmpty" => "The specified directory is not empty.",
		"DirectoryAccessDenied" => "You do not have permissions to the specified folder.",
		"DirectoryNameNotFound" => "Directory name cannot be empty.",
		"FileNotFound" => "The system could not locate the file specified.",
		"ModeEmpty" => "chmod mode cannot be empty.",
		"MixedEmpty" => "chown user cannot be empty.",
		"InvalidFile" => "An invalid file was specified.",
		"VarValEmpty" => "Value of variable was empty.",
		"VarNameNotFound" => "Variable name cannot be empty.",
		"UnknownSymbol" => "Unknown symbol, operator expected.",
		"DOMInstanceNotFound" => "The DOM element you searched for could not be found.",
		"MaxSearchLimitReached" => "The max search limit has been reached.",
		"FileDefNotFound" => "#!xsp; not found in parsable file.",
		"ModDefNotFound" => "#!xsp-module; not found in module file.",
		"ComplexInvalid" => "Invalid Complex variable definition.",
		"ClassNotFound" => "That class either does not exist or could not be located.",
		"SimplexInvalidDoesNotExist" => "That Simplex variable does not exist, please define it first.",
		"CouldNotWriteToFile" => "Could not write to specified file.",
		"ComplexDoesNotExist" => "That Complex variable does not exist.",
		"InvalidMathRoundOption" => "That is not a valid math function."
	];
	
	public function errgetname($code){
		return $this->err[$code];
	}
	
	public function errgetstr($name){
		return $this->errstr[$name];
	}
}
?>